(()=>{let e="treeSurveys";async function r(){let r=await new Promise(async(r,s)=>{let o=(await t()).transaction(e,"readonly").objectStore(e).getAll();o.onsuccess=e=>{r(e.target.result)},o.onerror=e=>{s(e.target.error)}});if(0!==r.length)try{if((await fetch("https://prod-31.brazilsouth.logic.azure.com:443/workflows/4351ccfcbdff44f39f2aa09c3b2aa54c/triggers/manual/paths/invoke?api-version=2016-06-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=hL45qx1L3SLKKXkvEjtaRq7y-IZwzIfyddSMbr_JyzQ",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})).ok)await new Promise(async(r,s)=>{let o=(await t()).transaction(e,"readwrite").objectStore(e).clear();o.onsuccess=()=>{r()},o.onerror=e=>{s(e.target.error)}}),console.log("Surveys synced successfully");else throw Error("Failed to sync surveys")}catch(e){console.error("Error syncing surveys:",e)}}function t(){return new Promise((r,t)=>{let s=indexedDB.open("SurveyDB",1);s.onupgradeneeded=r=>{r.target.result.createObjectStore(e,{keyPath:"id"})},s.onsuccess=e=>{r(e.target.result)},s.onerror=e=>{t(e.target.error)}})}self.addEventListener("sync",e=>{"sync-surveys"===e.tag&&e.waitUntil(r())})})();